@using ProjectSEM3.Models.Entities;
@using Newtonsoft.Json;
@{
    ViewBag.Title = "ViewQuiz";
    var result = Model as ContestantExam;
}

<div id="quizView">
    
</div>

@section scripts {
    <script type="text/javascript">
        const $quizView = $("#quizView")
        var quests = @Html.Raw(Json.Encode(result));
        const maths = quests.Computer;
        const quest = maths.filter(x => x.TypeName == "Ranking")[0]
        //Ranking demo
        let $rankingOptions = ''
        let $solfAbleList = ''
        const options = JSON.parse(quest.Options)
        let template = ''
        let localAnswer = []
        const ShowRankingQuestion = () => {
            for (var i = 0; i < 4; i++) {
                template += `
                    <li>
                        <div class="card rankingOptions" ondrag="OnDrag(event)" draggable=true style="cursor:pointer">
                            ${options[i]}
                        </div>
                    </li>
                `;
            }
            $quizView[0].innerHTML = `<ul class="solfAbleList">${template}</ul>`
            $rankingOptions = $(".rankingOptions")
            $solfAbleList = $(".solfAbleList")
        }

        const OnSubmitRanking = () => {
            for (var ele of $rankingOptions) {
                localAnswer.push(ele.innerHTML.trim())
            }
            console.log(localAnswer)
        }

        ShowRankingQuestion()
        OnSubmitRanking()
        
        const OnDrag = (e) => {
            e.target.classList.add("dragging")
        }

        const OnDragEnd = (e) => {
            e.target.classList.remove("dragging")
        }

        const Test = (e) => {
            e.preventDefault();
            const draggingItem = $solfAbleList[0].querySelector(".dragging");
            const siblings = [...$solfAbleList[0].querySelectorAll(".rankingOptions:not(.dragging)")]
            let nextSiblings = siblings.find(sibling => {
                return e.clientY <= sibling.offsetTop + sibling.offsetHeight / 2;
            })
            draggingItem.addEventListener("dragend", () => { draggingItem.classList.remove("dragging") })

            $solfAbleList[0].insertBefore(draggingItem, nextSiblings)
        }

        $solfAbleList[0].addEventListener("dragover", Test)
        //$solfAbleList.on("dragover", Test())


        // Cross demo
        //const options = JSON.parse(quest.Options)
        //const question = options[0]
        //const answer = options[1]

        //let localAnswer = []
        //for (var i = 0; i < 4; i++) {
        //    let tmpArr = []
        //    tmpArr.push(question[i])
        //    tmpArr.push("")
        //    localAnswer.push(tmpArr)
        //}
        //localStorage.setItem("localCross", JSON.stringify(localAnswer))

        //function showCrossAnswer() {
        //    let questCross = ``;
        //    let ansCross = ``;

        //    for (var i = 0; i < 4; i++) {
        //        questCross += `
        //            <div class="rounded-pill bg-white text-end d-flex align-items-center" style="width: 100%; height: 3.5rem; margin-bottom: 1rem; padding: 0 1rem 0 9.5rem;">
        //                <div style="margin-right: 1rem;">
        //                    ${question[i]}
        //                </div>
        //                    <input type="radio" onclick="addCrossQuestion(event)" name="question" value="${question[i]}" style="margin-right: 0"/>
        //            </div>
        //        `;

        //        ansCross += `
        //            <div class="rounded-pill bg-white text-start d-flex align-items-center" style="width: 100%; height: 3.5rem; margin-bottom: 1rem; padding: 0 5rem 0 1.5rem;">
        //                <input type="radio" onclick="addCrossAnswer(event)" name="answerCross" value="${answer[i]}"/>
        //                <div>${answer[i]}</div>
        //            </div>
        //        `;
        //    }

        //    var template =
        //            `
        //                <div class="row">
        //                    <div class="col-4">${questCross}</div>
        //                    <div class="col-1"></div>
        //                    <div class="col-4">${ansCross}</div>
        //                </div>
        //            `
        //    $quizView[0].innerHTML = template
        //}
        //showCrossAnswer();

        //let tmpQuestion = ''
        //let tmpAnswer = ''

        //const addCrossAnswer = (e) => {
        //    tmpAnswer = e.target.value
        //    onSelectCross()
        //}

        //const addCrossQuestion = (e) => {
        //    tmpQuestion = e.target.value

        //    onSelectCross()
        //}

        //const onSelectCross = () => {
        //    if (tmpQuestion == '' || tmpAnswer == '') {
        //        return;
        //    }
        //    var localData = JSON.parse(localStorage.getItem("localCross"))

        //    for (var item of localData) {
        //        if (item[0] == tmpQuestion) {
        //            item[1] = tmpAnswer
        //        }
        //    }
        //    localStorage.setItem("localCross", JSON.stringify(localData))
        //    console.log(localData)
        //    tmpQuestion = ''
        //    tmpAnswer = ''
        //}

    </script>
}
