@using ProjectSEM3.Models.Entities;
@using Newtonsoft.Json;
@{
    ViewBag.Title = "ViewQuiz";
    var result = Model as ContestantExam;
}

<div id="quizView">

</div>

@section scripts {
    <script type="text/javascript">
        //const $quizView = $("#quizView")
        @*var quests = @Html.Raw(Json.Encode(result));*@
        //const maths = quests.Computer;
        //const quest = maths.filter(x => x.TypeName == "Ranking")[0]
        //console.log(maths)
        //console.log(quest)

        //Ranking demo
        //let $rankingOptions = ''
        //let $solfAbleList = ''
        //const options = JSON.parse(quest.Options)
        //let template = ''
        //let localAnswer = []
        //const ShowRankingQuestion = () => {
        //    for (var i = 0; i < 4; i++) {
        //        template += `
        //            <li>
        //                <div class="card rankingOptions" ondrag="OnDrag(event)" draggable=true style="cursor:pointer">
        //                    ${options[i]}
        //                </div>
        //            </li>
        //        `;
        //    }
        //    $quizView[0].innerHTML = `<ul class="solfAbleList">${template}</ul>`
        //    $rankingOptions = $(".rankingOptions")
        //    $solfAbleList = $(".solfAbleList")
        //}

        //const OnSubmitRanking = () => {
        //    for (var ele of $rankingOptions) {
        //        localAnswer.push(ele.innerHTML.trim())
        //    }
        //    console.log(localAnswer)
        //}

        //ShowRankingQuestion()
        //OnSubmitRanking()

        //const OnDrag = (e) => {
        //    e.target.classList.add("dragging")
        //}

        //const OnDragEnd = (e) => {
        //    e.target.classList.remove("dragging")
        //}

        //const Test = (e) => {
        //    e.preventDefault();
        //    const draggingItem = $solfAbleList[0].querySelector(".dragging");
        //    const siblings = [...$solfAbleList[0].querySelectorAll(".rankingOptions:not(.dragging)")]
        //    let nextSiblings = siblings.find(sibling => {
        //        return e.clientY <= sibling.offsetTop + sibling.offsetHeight / 2;
        //    })
        //    draggingItem.addEventListener("dragend", () => { draggingItem.classList.remove("dragging") })

        //    $solfAbleList[0].insertBefore(draggingItem, nextSiblings)
        //}

        //$solfAbleList[0].addEventListener("dragover", Test)
        //$solfAbleList.on("dragover", Test())


        // Cross demo
        //localStorage.removeItem("localCross")

        //const options = JSON.parse(quest.Options)
        //const question = options[0]
        //const answer = options[1]

        //let localAnswer = []
        //for (var i = 0; i < 4; i++) {
        //    let tmpArr = []
        //    tmpArr.push(question[i])
        //    tmpArr.push("")
        //    localAnswer.push(tmpArr)
        //}
        //localStorage.setItem("localCross", JSON.stringify(localAnswer))

        //function showCrossAnswer() {
        //    let questCross = ``;
        //    let ansCross = ``;

        //    for (var i = 0; i < 4; i++) {
        //        questCross += `
        //            <div class="rounded-pill bg-white text-end d-flex align-items-center" style="width: 100%; height: 3.5rem; margin-bottom: 1rem; padding: 0 1rem 0 9.5rem;">
        //                <div style="margin-right: 1rem;">
        //                    ${question[i]}
        //                </div>
        //                    <input type="radio" onclick="addCrossQuestion(event)" name="question" value="${question[i]}" style="margin-right: 0"/>
        //            </div>
        //        `;

        //        ansCross += `
        //            <div class="rounded-pill bg-white text-start d-flex align-items-center" style="width: 100%; height: 3.5rem; margin-bottom: 1rem; padding: 0 5rem 0 1.5rem;">
        //                <input type="radio" onclick="addCrossAnswer(event)" name="answerCross" value="${answer[i]}"/>
        //                <div>${answer[i]}</div>
        //            </div>
        //        `;
        //    }

        //    var template =
        //            `
        //                <div class="row">
        //                    <div class="col-4">${questCross}</div>
        //                    <div class="col-1"></div>
        //                    <div class="col-4">${ansCross}</div>
        //                </div>
        //            `
        //    $quizView[0].innerHTML = template
        //}
        //showCrossAnswer();

        //let tmpQuestion = ''
        //let tmpAnswer = ''

        //const addCrossAnswer = (e) => {
        //    tmpAnswer = e.target.value
        //    onSelectCross()
        //}

        //const addCrossQuestion = (e) => {
        //    tmpQuestion = e.target.value

        //    onSelectCross()
        //}

        //const onSelectCross = () => {
        //    if (tmpQuestion == '' || tmpAnswer == '') {
        //        return;
        //    }
        //    var localData = JSON.parse(localStorage.getItem("localCross"))

        //    for (var item of localData) {
        //        if (item[0] == tmpQuestion) {
        //            item[1] = tmpAnswer
        //        }
        //    }
        //    localStorage.setItem("localCross", JSON.stringify(localData))
        //    console.log(localData)
        //    tmpQuestion = ''
        //    tmpAnswer = ''
        //}

    </script>
}


let $rankingOptions = ''
        let $solfAbleList = ''
        let localRankingAnswer = []

        function showRakingAnswer() {
            let options = ``;
            let template = ''

            var convertOptionsToArray = JSON.parse(question.Options);

            //if (question.TypeId == 3) {
            //    for (var i = 0; i < convertOptionsToArray.length; i++) {
            //        let option = convertOptionsToArray[i];

            //        options += `
            //            <div class="list rounded-pill bg-white text-start mt-3" draggable=true style="width: 100%; height: 56px; cursor:grab">
    //                <span class="d-flex align-items-center justify-content-start text-dark fw-normal" draggable=true style="width: 100%; height: 56px; padding: 0 0 0 20px; font-size: 14px">
        //                    ${option}
        //
    </span>
    //
</div>
            //        `;
            //    }
            //    console.log(rankingLists)
            //        for (list of rankingLists) {
            //            console.log(list)
            //            list.addEventListener("dragstart", function (e) {
            //                let selected = e.target;

            //                rightBox.addEventListener("dragover", function (e) {
            //                    e.preventDefault();
            //                });
            //                rightBox.addEventListener("drop", function (e) {
            //                    rightBox.appendChild(selected);
            //                    selected = null;
            //                });
            //            });
            //        }
            //}

            if (question.TypeId == 3) {
                for (var i = 0; i < 4; i++) {
                    template += `
<li>
    <div class="card rankingOptions" ondrag="OnDrag(event)" ondragover="Test(event)" draggable=true style="cursor:pointer">
        ${convertOptionsToArray[i]}
    </div>
</li>
                    `;
                }

            }
            options = `<ul class="solfAbleList">${template}</ul>`
            return options;
        }

        const OnSubmitRanking = () => {
            for (var ele of $rankingOptions) {
                localRankingAnswer.push(ele.innerHTML.trim())
            }
            console.log(localRankingAnswer)
        }

        const OnDrag = (e) => {
            e.target.classList.add("dragging")
        }

        const OnDragEnd = (e) => {
            e.target.classList.remove("dragging")
        }

        const Test = (e) => {
            e.preventDefault();
            const draggingItem = e.target;
            //const siblings = [...$solfAbleList[0].querySelectorAll(".rankingOptions:not(.dragging)")]
            //let nextSiblings = siblings.find(sibling => {
            //    return e.clientY <= sibling.offsetTop + sibling.offsetHeight / 2;
            //})
            let nextSibling
            for (var ele of $solfAbleList[0].querySelectorAll(".rankingOptions:not(.dragging)")) {
                if (e.clientY <= (ele.offsetTop + ele.offsetHeight / 2)) {
                    nextSibling = ele
                    break;
                }
            }
            $solfAbleList[0].insertBefore(draggingItem, nextSibling)

            draggingItem.addEventListener("dragend", () => { draggingItem.classList.remove("dragging") })

            //$solfAbleList[0].insertBefore(draggingItem, nextSiblings[0])
        }

${question.TypeId == 3
                    ? `
<div class="rankingView form_items d-flex flex-column justify-content-center">
    ${optionRanking}
</div>
                    ` : ``}

if (question.TypeId == 3) {
            $rankingOptions = $(".rankingOptions")
            $solfAbleList = $(".solfAbleList")
            //$solfAbleList[0].addEventListener("dragover", Test)
        }