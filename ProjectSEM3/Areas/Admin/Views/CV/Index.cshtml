
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="container">
    <h1>CV</h1>

    <div class="me-4">
        @Html.Partial("~/Areas/Admin/Views/Shared/Partials/Cv/_PartialView.cshtml")
    </div>
</div>


@section Scripts{
    <script type="text/javascript">
        const $name = $("#name")
        const $email = $("#email")
        const $contact = $("#contact")
        const $address = $("#address")
        const $level = $("#level")
        const $levelId = $("#levelId")
        const $filePath = $("#filePath")

        const $cvTable = $("#cvTable")
        const $liveToast = $("#liveToast")
        const $toastMes = $("#toastMes")

        $cvTable.DataTable();

        let RowIndex = 0;
        let CurrentId = 0;
        let CurrentSelection = ''

        const OnSelectRowCv = (e) => {
            RowIndex = e.target.parentElement.parentElement.rowIndex
            CurrentSelection = e.target
            CurrentId = e.target.getAttribute('data-index')
            const data = JSON.parse(e.target.getAttribute('data-cv'))

            $name.val(data.Name)
            $email.val(data.Email)
            $contact.val(data.Phone)
            $address.val(data.Address)
            $level.val(data.LevelName)
            $levelId.val(data.LevelId)
            $filePath.val(data.FilePath)
        }

        const OnNewContestant = () => {
            const Name = $name.val()
            const Email = $email.val()
            const Contact = $contact.val()
            const Address = $address.val()
            const LevelId = $levelId.val()
            const FilePath = $filePath.val()

            const req = {
                Name,
                Email,
                Contact,
                Address,
                LevelId,
                FilePath
            }

            console.log(req)
            //$.ajax({
            //    type: "POST",
            //    url: "/admin/question/NewQuestion",
            //    data: req,
            //    dataType: "json",
            //    success: function (res) {
            //        OnSetupToast(res, $liveToast, $toastMes)
            //    },
            //    error: function (jqXHR, err, errorThrown) {
            //        OnServerErr($liveToast, $toastMes);
            //    }
            //});
            setTimeout(OnHideToast, 3000)
        }

        const OnChangeCvStatus = (e) => {
            RowIndex = e.target.parentElement.parentElement.rowIndex
            const Id = e.target.getAttribute('data-index')
            const data = JSON.parse(e.target.getAttribute('data-cv'))
            const Status = !data.Status
            const cv = { Id, Status }
            $.ajax({
                type: "POST",
                url: "/admin/cv/ChangeCvStatus",
                data: cv,
                dataType: "json",
                success: function (res) {
                    OnSetupToast(res, $liveToast, $toastMes)
                    e.target.setAttribute('data-cv', JSON.stringify(res.Data))
                    if (res.Data.Status) {
                        $cvTable[0].rows[RowIndex].children[5].innerHTML = `<span class="badge bg-success">Active</span>`;
                    } else {
                        $cvTable[0].rows[RowIndex].children[5].innerHTML = `<span class="badge bg-danger">Deleted</span>`;
                        e.target.hidden = true
                    }
                },
                error: function (jqXHR, err, errorThrown) {
                    OnServerErr($liveToast, $toastMes);
                }
            });

            setTimeout(OnHideToast, 3000)
        }

        const OnHideToast = () => {
            $liveToast.hide()
        }

        const OnSetupToast = (res, $toast, $toastMes) => {
            if (res.IsErr) {
                OnRemoveClassName($toast, "bg-danger-subtle")
                OnAddClassName($toast, "bg-primary-subtle");
            } else {
                OnRemoveClassName($toast, "bg-primary-subtle");
                OnAddClassName($toast, "bg-danger-subtle")
            }
            $toastMes[0].innerHTML = res.Mes
            $toast.show()
        }

        const OnAddClassName = (ele, className) => {
            if (!ele[0].classList.contains(className)) {
                ele[0].classList.add(className);
            }
        }

        const OnRemoveClassName = (ele, className) => {
            ele[0].classList.remove(className);
        }

        const OnServerErr = ($toast, $toastMes) => {
            OnRemoveClassName($toast, "bg-primary-subtle");
            OnAddClassName($toast, "bg-danger-subtle")
            $toastMes[0].innerHTML = "Connection fail or Something wrong in server."

        }
    </script>
}